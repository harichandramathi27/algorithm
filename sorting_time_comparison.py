# -*- coding: utf-8 -*-
"""sorting_time_comparison.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ubTYIG02HwJYs9ORO-p5K6zfrsGdVIFR
"""

import time
import matplotlib.pyplot as plt


def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    return merge(left, right)

def merge(left, right):
    result = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    result.extend(left[i:])
    result.extend(right[j:])
    return result


def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)


n_values = [100, 500, 1000, 5000, 10000, 20000]
merge_sort_times = []
quick_sort_times = []

for n in n_values:
    arr = list(range(n, 0, -1))


    start_time = time.time()
    merge_sort(arr)
    merge_sort_times.append(time.time() - start_time)


    start_time = time.time()
    quick_sort(arr)
    quick_sort_times.append(time.time() - start_time)


plt.plot(n_values, merge_sort_times, label='Merge Sort', marker='o')
plt.plot(n_values, quick_sort_times, label='Quick Sort', marker='o')
plt.xlabel('Number of elements (n)')
plt.ylabel('Time taken (seconds)')
plt.title('Sorting Time Comparison')
plt.legend()
plt.grid()
plt.show()

